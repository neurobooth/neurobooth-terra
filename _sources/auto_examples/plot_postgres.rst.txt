
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_postgres.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_postgres.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_postgres.py:


=========================================================
CRUD operations on Postgres tables using Neurobooth-terra
=========================================================

This example demonstrates how to perform `CRUD`_ operations
on postgres tables with neurobooth-terra.

.. GENERATED FROM PYTHON SOURCE LINES 9-12

.. code-block:: default


    # Authors: Mainak Jas <mjas@harvard.mgh.edu>








.. GENERATED FROM PYTHON SOURCE LINES 13-16

.. contents:: Table of Contents
   :local:


.. GENERATED FROM PYTHON SOURCE LINES 18-19

Let us first import the necessary functions.

.. GENERATED FROM PYTHON SOURCE LINES 19-25

.. code-block:: default


    from neurobooth_terra import list_tables, create_table, drop_table, Table

    import psycopg2
    import pandas as pd








.. GENERATED FROM PYTHON SOURCE LINES 26-27

Then, we will create a connection using ``psycopg2``.

.. GENERATED FROM PYTHON SOURCE LINES 27-32

.. code-block:: default

    connect_str = ("dbname='neurobooth' user='neuroboother' host='localhost' "
                   "password='neuroboothrocks'")

    conn = psycopg2.connect(connect_str)








.. GENERATED FROM PYTHON SOURCE LINES 33-36

We will drop tables if they already exist
this is just for convenience so we can re-run this script
even when changing some columns

.. GENERATED FROM PYTHON SOURCE LINES 36-40

.. code-block:: default

    drop_table('subject', conn)
    drop_table('contact', conn)
    drop_table('consent', conn)








.. GENERATED FROM PYTHON SOURCE LINES 41-44

Create
------
Now we define the Table

.. GENERATED FROM PYTHON SOURCE LINES 44-49

.. code-block:: default

    table_id = 'subject'
    table_subject = create_table(table_id, conn,
                                 ['subject_id', 'first_name_birth', 'last_name_birth'],
                                 ['VARCHAR (255)', 'VARCHAR (255)', 'VARCHAR (255)'])








.. GENERATED FROM PYTHON SOURCE LINES 50-51

and insert some data and retrieve the table as a dataframe

.. GENERATED FROM PYTHON SOURCE LINES 51-54

.. code-block:: default

    table_subject.insert_rows([('x5dc', 'mainak', 'jas'),
                               ('y5d3', 'anoopum', 'gupta')])








.. GENERATED FROM PYTHON SOURCE LINES 55-57

We can create another table and relate it to the other table using
a foreign key

.. GENERATED FROM PYTHON SOURCE LINES 57-64

.. code-block:: default

    table_id = 'contact'
    table_contact = create_table(table_id, conn,
                                 column_names=['subject_id', 'email'],
                                 dtypes=['VARCHAR (255)', 'VARCHAR (255)'],
                                 foreign_key=dict(subject_id='subject'))
    table_contact.insert_rows([('x5dc',), ('y5d3',)], ['subject_id'])








.. GENERATED FROM PYTHON SOURCE LINES 65-68

Read
----
We can get a list of tables in the database by doing

.. GENERATED FROM PYTHON SOURCE LINES 68-70

.. code-block:: default

    list_tables(conn)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['subject', 'contact', 'test_consent', 'sensor_file_log', 'test']



.. GENERATED FROM PYTHON SOURCE LINES 71-73

From the list of these table, we can select one to inspect by
creating a :class:`~neurobooth_terra.Table` object.

.. GENERATED FROM PYTHON SOURCE LINES 73-77

.. code-block:: default

    table_id = 'subject'
    table_subject = Table(table_id, conn)
    print(table_subject)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Table "subject" (subject_id, first_name_birth, last_name_birth)




.. GENERATED FROM PYTHON SOURCE LINES 78-80

With this Table object, we can create a query that
returns a dataframe

.. GENERATED FROM PYTHON SOURCE LINES 80-83

.. code-block:: default

    df_subject = table_subject.query(f'SELECT * FROM "{table_id}";')
    print(df_subject)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

               first_name_birth last_name_birth
    subject_id                                 
    x5dc                 mainak             jas
    y5d3                anoopum           gupta




.. GENERATED FROM PYTHON SOURCE LINES 84-87

Update
------
We can make changes such as adding a new column

.. GENERATED FROM PYTHON SOURCE LINES 87-90

.. code-block:: default

    table_subject.add_column('dob', 'VARCHAR (255)')
    print(table_subject.query('SELECT * FROM subject'))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

               first_name_birth last_name_birth   dob
    subject_id                                       
    x5dc                 mainak             jas  None
    y5d3                anoopum           gupta  None




.. GENERATED FROM PYTHON SOURCE LINES 91-92

To update a row in the table we can do

.. GENERATED FROM PYTHON SOURCE LINES 92-97

.. code-block:: default

    table_subject.update_row('y5d3',
                             cols=['first_name_birth', 'last_name_birth'],
                             vals=('anupum', 'gupta'))
    print(table_subject.query('SELECT * FROM subject'))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

               first_name_birth last_name_birth   dob
    subject_id                                       
    x5dc                 mainak             jas  None
    y5d3                 anupum           gupta  None




.. GENERATED FROM PYTHON SOURCE LINES 98-101

Delete
------
We can also delete rows in our table

.. GENERATED FROM PYTHON SOURCE LINES 101-104

.. code-block:: default

    table_subject.delete_row(condition="subject_id = 'yd53'")
    print(table_subject.query(f'SELECT * FROM "{table_id}";'))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

               first_name_birth last_name_birth   dob
    subject_id                                       
    x5dc                 mainak             jas  None
    y5d3                 anupum           gupta  None




.. GENERATED FROM PYTHON SOURCE LINES 105-106

Or drop columns

.. GENERATED FROM PYTHON SOURCE LINES 106-109

.. code-block:: default

    table_contact.drop_column('subject_id')
    print(table_subject.query(f'SELECT * FROM "{table_id}";'))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

               first_name_birth last_name_birth   dob
    subject_id                                       
    x5dc                 mainak             jas  None
    y5d3                 anupum           gupta  None




.. GENERATED FROM PYTHON SOURCE LINES 110-111

To delete an entire table, we can do

.. GENERATED FROM PYTHON SOURCE LINES 111-113

.. code-block:: default

    drop_table('subject', conn)
    list_tables(conn)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['contact', 'test_consent', 'sensor_file_log', 'test']



.. GENERATED FROM PYTHON SOURCE LINES 114-115

Don't forget to close the connection once done!

.. GENERATED FROM PYTHON SOURCE LINES 115-119

.. code-block:: default

    table_subject.close()
    table_contact.close()
    conn.close()








.. GENERATED FROM PYTHON SOURCE LINES 120-121

.. _CRUD: https://en.wikipedia.org/wiki/Create,_read,_update_and_delete


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.798 seconds)


.. _sphx_glr_download_auto_examples_plot_postgres.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_postgres.py <plot_postgres.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_postgres.ipynb <plot_postgres.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
