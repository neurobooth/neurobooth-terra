
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_redcap_to_postgres.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_redcap_to_postgres.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_redcap_to_postgres.py:


======================================
Ingest table from Redcap into Postgres
======================================

This example demonstrates how to create table from Redcap.

.. GENERATED FROM PYTHON SOURCE LINES 8-19

.. code-block:: default


    # Authors: Mainak Jas <mjas@harvard.mgh.edu>

    import os

    from redcap import Project, RedcapError
    from neurobooth_terra.ingest_redcap import fetch_survey, iter_interval

    import psycopg2
    from neurobooth_terra import Table, create_table, drop_table








.. GENERATED FROM PYTHON SOURCE LINES 20-24

Let us first define the surveys and their survey IDs that we want to fetch.
This information can be found on Redcap. To fetch Redcap data, you will
also need to define the NEUROBOOTH_REDCAP_TOKEN environment variable.
You will need to request for the Redcap API token from Redcap interface.

.. GENERATED FROM PYTHON SOURCE LINES 24-43

.. code-block:: default


    survey_ids = {'consent': 84349, 'contact': 84427, 'demographics': 84429,
                  'clinical': 84431, 'falls': 85031, 'subject': 84426}
    survey_ids = {'subject': 84426, 'consent': 84349}

    URL = 'https://redcap.partners.org/redcap/api/'
    API_KEY = os.environ.get('NEUROBOOTH_REDCAP_TOKEN')

    connect_str = ("dbname='neurobooth' user='neuroboother' host='localhost' "
                   "password='neuroboothrocks'")

    if API_KEY is None:
        raise ValueError('Please define the environment variable NEUROBOOTH_REDCAP_TOKEN first')

    project = Project(URL, API_KEY, lazy=True)

    # First create a connection to the database
    conn = psycopg2.connect(connect_str)








.. GENERATED FROM PYTHON SOURCE LINES 44-48

Next, we fetch the metadata table. This table is the master table
that contains columns and their informations. It can be used to infer
information about the columns: example, what choices are available for a
particular question.

.. GENERATED FROM PYTHON SOURCE LINES 48-58

.. code-block:: default


    print('Fetching metadata ...')
    metadata = project.export_metadata(format='df')
    metadata_fields = ['field_label', 'form_name', 'section_header',
                       'field_type', 'select_choices_or_calculations',
                       'required_field']
    metadata = metadata[metadata_fields]
    # metadata.to_csv(op.join(data_dir, 'data_dictionary.csv'), index=False)
    print('[Done]')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Fetching metadata ...
    [Done]




.. GENERATED FROM PYTHON SOURCE LINES 59-60

Finally, we loop over the surveys and collect them.

.. GENERATED FROM PYTHON SOURCE LINES 60-122

.. code-block:: default

    import pandas as pd
    import hashlib

    # TODO: add test for iter_interval
    for _ in iter_interval(wait=5, exit_after=2):

        dfs = dict()
        for survey_name, survey_id in survey_ids.items():
            df = fetch_survey(project, survey_name, survey_id)
            # convert NaN to None for psycopg2
            dfs[survey_name] = df

        # Now, we will add the consent table to the subject table so we can
        # match subjects based on record_id
        df_redcap = dfs['subject'].join(dfs['consent'], rsuffix='consent')
        print(df_redcap.columns)

        # Now, we will prepare the contents of the subject table in postgres
        rows_subject = list()
        rows_consent = list()

        df_redcap = df_redcap[~pd.isna(df_redcap['first_name_birth'])]

        for df_row in df_redcap.iterrows():
            df_row = df_row[1]

            subject_id = df_row['first_name_birth'] + df_row['last_name_birth']
            subject_id = hashlib.md5(subject_id.encode('ascii')).hexdigest()

            rows_subject.append((subject_id,
                                df_row['first_name_birth'],
                                df_row['middle_name_birth'],
                                df_row['last_name_birth'],
                                df_row['date_of_birth'],
                                df_row['country_of_birth'],
                                df_row['gender_at_birth'],
                                df_row['birthplace']))
            rows_consent.append((subject_id,
                                'study1',  # study_id
                                'Neuroboother',  # staff_id
                                'REDCAP',  # application_id
                                'MGH',  # site_id
                                # None, # date (missing)
                                # df_row['educate_clinicians_adults'],
                                # df_row['educate_clinicians_initials_adult'],
                                # bool(df_row['future_research_consent_adult'])
            ))
        for row_subject in rows_subject[:5]:
            print(row_subject)

        # Then we insert the rows in this table
        cols_subject = ['subject_id', 'first_name_birth', 'middle_name_birth',
                        'last_name_birth', 'date_of_birth', 'country_of_birth',
                        'gender_at_birth', 'birthplace']
        table_subject = Table('subject', conn)
        table_subject.insert_rows(rows_subject, cols_subject)

        table_consent = Table('consent', conn)
        cols_consent = ['subject_id', 'study_id', 'staff_id', 'application_id',
                        'site_id']
        table_consent.insert_rows(rows_consent, cols_consent)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Fetching report subject from Redcap
    [Done]
    Fetching report consent from Redcap
    [Done]
    Index(['record_id', 'redcap_event_name', 'redcap_repeat_instrument',
           'redcap_repeat_instance', 'first_name_birth', 'middle_name_birth',
           'last_name_birth', 'date_of_birth', 'country_of_birth', 'birthplace',
           'gender_at_birth', 'record_idconsent', 'redcap_event_nameconsent',
           'redcap_repeat_instrumentconsent', 'redcap_repeat_instanceconsent',
           'redcap_survey_identifier'],
          dtype='object')
    ('11253c82a3365f445047eb6c652b7b9e', 'Louis', 'Ron', 'Hernandez', '1966-09-05', 1.0, 1.0, 'Worcester')
    ('056c329596bfe609d731e046a9578b31', 'Marcella', 'Catherine ', 'Russell', '1984-08-19', 1.0, 2.0, 'Denver')
    ('a2f3512e457f0e63197c01cd863901af', 'Colleen', 'Mary', 'Gordon', '1924-07-15', 1.0, 2.0, 'Portland')
    ('1d45fcd6e1cfda61971a6c840b40730c', 'Ann', 'Marie', 'Benson', '1958-04-16', 1.0, 2.0, 'Toledo')
    ('ea5b85adb4af96fce82882048b1ff02a', 'Grady', 'Burt', 'Fleming', '1943-07-25', 1.0, 1.0, 'Boston')
    Time left: 3.17 s



.. GENERATED FROM PYTHON SOURCE LINES 123-128

We will drop our tables if they already exist
this is just for convenience so we can re-run this script
and create a new mock subject table and consent table to test our script
drop_table('subject', conn)
drop_table('consent', conn)

.. GENERATED FROM PYTHON SOURCE LINES 128-138

.. code-block:: default


    # table_id = 'subject'
    # datatypes = ['VARCHAR (255)', 'VARCHAR (255)', 'VARCHAR (255)', 'VARCHAR (255)',
    #              'date', 'VARCHAR (255)', 'VARCHAR (255)', 'VARCHAR (255)']
    # table_subject = create_table(table_id, conn, cols_subject, datatypes)

    # table_id = 'consent'
    # datatypes = ['VARCHAR (255)'] * len(cols_consent)
    # table_consent = create_table(table_id, conn, cols_consent, datatypes)








.. GENERATED FROM PYTHON SOURCE LINES 139-142

Let's do a query to check that the content is in there
print(table_subject.query())
print(table_consent.query())


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.202 seconds)


.. _sphx_glr_download_auto_examples_plot_redcap_to_postgres.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_redcap_to_postgres.py <plot_redcap_to_postgres.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_redcap_to_postgres.ipynb <plot_redcap_to_postgres.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
